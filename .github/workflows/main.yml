name: Nx Standard Use Case
  
on: 
  push:
    branches: [ develop, feature/ci-tests ]
  pull_request:
    branches: [ develop, feature/ci-tests ]
# env:
#   NX_HEAD: feature/ci-tests
jobs:
  cache:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # - name: Derive appropriate SHAs for base and head for `nx affected` commands
      #   uses: nrwl/nx-set-shas@v2
      #   if: ${{ !env.ACT }}
      #   with:
      #     main-branch-name: ${GITHUB_REF#refs/heads/}
      - name: Branch name
        run: echo running on branch ${GITHUB_REF#refs/heads/}
      - name: Cache node modules
        id: dependency_cache
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
            path: '**/node_modules'
            key: ${{ runner.os }}-build-cache-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install packages
        run: yarn install --frozen-lockfile

        # with:
        #   main-branch-name: 'develop'
        
      - run: npx nx affected:lint --base=${GITHUB_REF#refs/heads/}
      - run: npx nx affected:test --base=${GITHUB_REF#refs/heads/}
      - run: npx nx affected:build --base=${GITHUB_REF#refs/heads/}
        

  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Node Setup
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '16'
  #     - run: npm install
  #     - name: Derive appropriate SHAs for base and head for `nx affected` commands
  #       uses: nrwl/nx-set-shas@v2
  #       if: ${{ !env.ACT }}
  #       with:
  #         main-branch-name: 'develop'
  #     - run: npx nx affected:lint --base=${{ env.NX_HEAD }}
  #     - run: npx nx affected:test --base=${{ env.NX_HEAD }}
  #     - run: npx nx affected:build --base=${{ env.NX_HEAD }}
  # cypress-e2e-test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Derive appropriate SHAs for base and head for `nx affected` commands
  #       uses: nrwl/nx-set-shas@v2
  #       if: ${{ !env.ACT }}
  #       with:
  #         main-branch-name: 'develop'
  #     - name: Node Setup
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '16'
  #     - run: npm install
  #     - run: npx nx affected:e2e --base=${{ env.NX_HEAD }}
  # deploy:
  #   needs: test



# # This is a basic workflow to help you get started with Actions
# name: CI

# # Controls when the workflow will run
# on:
#   # Triggers the workflow on push or pull request events but only for the develop branch
#   push:
#     branches: [ develop ]
#   #pull_request:
#    # branches: [ develop ]

#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   build:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest
    

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v2
#         name: Checkout [develop]
#         with:
#           fetch-depth: 0
#       - name: Derive appropriate SHAs for base and head for `nx affected` commands
#         uses: nrwl/nx-set-shas@v2
#       - uses: actions/setup-node@v1
#         with:
#           node-version: '16'
#       - name: Cache node modules
#         id: dependency_cache
#         uses: actions/cache@v2
#         env:
#           cache-name: cache-node-modules
#         with:
#             path: '**/node_modules'
#             key: ${{ runner.os }}-build-cache-node-modules-${{ hashFiles('**/yarn.lock') }}
#           #npm cache files are stored in `~/.npm` on Linux/macOS
#           #path: ~/.npm
#           #key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
#           #restore-keys: |
#            # ${{ runner.os }}-build-${{ env.cache-name }}-
#             #${{ runner.os }}-build-
#             #${{ runner.os }}-
#       - name: Install Depedencies
#         if: steps.dependency_cache.outputs.cache-hit != 'true'
#         #run: npm install
#         run: yarn install --frozen-lockfile
#       - run: yarn nx affected --target=build --all



# name: Nx Distributed Tasks
# on: push
# jobs:
#   install-deps:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - name: Cache node modules
#         if: ${{ !env.ACT }}
#         uses: actions/cache@v2
#         env:
#           cache-name: cache-node-modules
#         with:
#           # npm cache files are stored in `~/.npm` on Linux/macOS
#           path: ~/.npm
#           key: ${{ runner.os }}-feature-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
#           restore-keys: |
#             ${{ runner.os }}-feature-${{ env.cache-name }}-
#             ${{ runner.os }}-feature-
#             ${{ runner.os }}-
#       - run: npm install
#   distributed-task:
#       runs-on: ubuntu-latest
#       needs: install-deps
#       strategy:
#         matrix:
#           target: ['test', 'lint', 'build']
#           jobIndex: [1, 2, 3, 4]
#       env:
#         jobCount: 4
#       steps:
#         - uses: actions/checkout@v2
#         - run: git fetch --no-tags --prune --depth=1 origin develop
#         - name: Cache node modules
#           uses: actions/cache@v2
#           if: ${{ !env.ACT }}
#           with:
#             path: node_modules
#             key: cache-node-modules-${{ hashFiles('yarn.lock') }}
#         - run: node ./tools/scripts/run-many.js ${{ matrix.target }} ${{ matrix.jobIndex }} ${{ env.jobCount }} $GITHUB_REF